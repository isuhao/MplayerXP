#!/bin/bash
# query full-featured shell here
#
# Original version (C) 2000 Pontscho/fresh!mindworkz
#                      pontscho@makacs.poliod.hu
#
# History / Contributors: check the cvs log !
#
# Cleanups all over the place (c) 2001 pl
#
#
# Guidelines:
# If the option is named 'opt':
#   _opt : should have a value in yes/no/auto
#   _def_opt : '#define ... 1' or '#undef ...' that is: some C code
#   _ld_opt : ' -L/path/dir -lopt ' that is: some GCC option
#   _inc_opt : ' -I/path/dir/include '
#
# In this file, a tab is 8 chars and indentation shift is 2 characters
#
# GOTCHAS:
#  - config files are currently:
#    mp_config.h mp_config.mak libvo/mp_config.mak libao2/mp_config.mak
#
#############################################################################
. ../functions
init_functions

cd nls
LANGUAGES=`echo help_mp-??.h | sed "s/help_mp-\(..\).h/\1/g"`
cd ..
linguas=`echo $LANG | sed 's/^\([^_]*\).*$/\1/'`
test -z $linguas && linguas=en

# GOTCHA: the variables below defines the default behavior for autodetection
# and have - unless stated otherwise - at least 2 states : yes no
# If autodetection is available then the third state is: auto
ENABLED_LIST=(
    "shared|build shared libraries",
    "gomp|use GNU OpenMP (requires gcc-4.3+)",
    "fastcall|use regparm method on x86 systems",
    "fastmemcpy|use 3dnow/sse/mmx optimized memcpy()",
    "streaming|build with network support (http/mms/rtp)",
    "af_inet6|build with support for IPv6 protocol",
    "termcap|build with termcap database for key codes|http://www.catb.org/~esr/terminfo",
    "termios|build with termios database for key codes|http://www.catb.org/~esr/terminfo",
    "shm|build with shared memory if possible",
    "rtc|use RTC (/dev/rtc) on Linux",
    "iconv|build with iconv for encoding conversion|http://www.gnu.org/software/libiconv",
    "winsock2|use winsock2.h if possible",
    "largefiles|enable support for files > 2GB",
    "ossaudio|build with OSS audio output",
    "audio_select|use select() on OSS audio device",
    "alsa|build with ALSA audio output|http://www.alsa-project.org",
    "arts|build with ARTS audio output|http://www.arts-project.org",
    "esd|build with ESD audio ouput|ftp://ftp.gnome.org/pub/gnome/sources/esound",
    "openal|build with OpenAL audio output|http://connect.creativelabs.com/openal/default.aspx",
    "nas|build with NAS uadio output|http://nas.sourceforge.net",
    "jack|build with JACK audio output|http://jackaudio.org",
    "libcdio|build with libcdio support|http://www.gnu.org/software/libcdio/index.html",
    "x11|build with X11 video ouput|http://www.x.org",
    "xv|build with Xv video output|http://www.x.org",
    "sdl|build with SDL video and audio output|http://www.libsdl.org",
    "sdl_image|build with SDL_image for screenshots|http://www.libsdl.org/projects/SDL_image",
    "fbdev|build with FBDev video ouput",
    "jpg|build with JPEG for screenshots|http://www.ijg.org",
    "png|build with PNG for screenshots|http://www.libpng.org/pub/png/libpng.html",
    "opengl|build with OpenGL video output|http://mesa3d.org",
    "dga|build with DGA video output|http://www.x.org",
    "vesa|build with VESA video output",
    "vidix|build with VIDIX video output|http://vidix.sourceforge.net",
    "xdpms|build with X11 DPMS support|http://www.x.org",
    "xinerama|build with X11 Xinerama support|http://www.x.org",
    "xf86vm|build with X11 XF86Vm support|http://www.x.org",
    "tv|build wuth TV Interface (tv/dvb grabbers)",
    "tv_v4l|build with Video 4 Linux TV Interface support",
    "lirc|build with LIRC (remote control) support|http://www.lirc.org",
    "lircc|build with LIRCC (remote daemon control) support|http://www.lirc.org",
    "joystick|build with joystick support",
    "libcss|build with libcss support|http://download.videolan.org/pub/videolan/libdvdcss",
    "libdvdread|build with libdvdread support|http://www.dtek.chalmers.se/groups/dvd/downloads.shtml",
    "libdvdnav|build with libdvdnav support|http://dvd.sourceforge.net",
    "libdv|build with libdv support|http://libdv.sourceforge.net/",
    "libvcd|build with libvcd support|http://www.gnu.org/software/vcdimager",
    "libvorbis|build with libvorbis support|http://www.vorbis.com",
    "libtheora|build with libtheora support|http://www.theora.org",
    "libbz2|build with libbz2 support|http://www.bzip.org"
)
DISABLED_LIST=(
    "gcov|compile gnu coverage information into PROGRAM",
    "profile|compile profiling information into PROGRAM",
    "static|build static libraries"
)

AUTOCONF_LIST=(
    "ENABLED_LIST",
    "DISABLED_LIST"
)

PATH_LIST=(
    "prefix|architecture-independent files|/usr/local",
    "exec_prefix|architecture-dependent files|\$prefix",
    "bindir|user executables|\$exec_prefix/bin",
    "libdir|object code libraries|\$exec_prefix/lib",
    "datadir|read-only architecture-independent data|\$prefix/share/mplayerxp",
    "confdir|read-only configuration files|\$prefix/share/mplayerxp",
    "win32libdir|win32 .dll locations [/usr/lib/win32]"
)

PROGNAME_LIST=(
  "program_prefix|prepend PREFIX to installed program names",
  "program_suffix|append SUFFIX to installed program names",
  "program_transform_name|use TRANSFORM_NAME as program name|mplayerxp"
)

SYSTYPES_LIST=(
    "build|configure for building on BUILD [guessed]",
    "host|cross-compile to build program to run on HOST [BUILD]",
    "cc|use this C compiler to build PROGRAM|gcc",
    "as|use this ASSEMBLER to build PROGRAM|as",
    "ld|use this LINKER to build PROGRAM|gcc",
    "ldconfig|use this LDCONFIG to install PROGRAM|ldconfig",
    "install|use this INSTALL to install PROGRAM|install",
    "pkg_config|use this PKG-CONFIG to configure PROGRAM|pkg-config",
    "debug|compile debugging information into PROGRAM|0",
    "language|force this language as default for PROGRAM (Available: $LANGUAGES)|$linguas"
)

SYSCONF_LIST=(
    "SYSTYPES_LIST",
    "PROGNAME_LIST",
    "PATH_LIST"
)

EXTRA_LIST=(
    "asflags|add these FLAGS to [\$ASFLAGS=$ASFLAGS]",
    "cflags|add these FLAGS to [\$CFLAGS=$CFLAGS]",
    "ldflags|add these FLAGS to [\$LDFLAGS=$LDFLAGS]",
    "extralibs|add these LIBS to [\$LIBS=$LIBS]"
)

ADD_LIST=(
    "EXTRA_LIST",
)

ENVIRONMENT_LIST=(
    "MAKE|Make command (example: 'make -j')|make",
    "AS|Assembler command|as",
    "CC|C compiler command (example: 'gcc -m64')|cc",
    "CFLAGS|C compiler flags (example: '-funit-at-a-time')",
    "LDFLAGS|linker flags (example: '-L/opt/lib64')",
    "LIBS|additional libraries (example: 'LIBS=-lacml_mv')",
    "DESTDIR|specifies base of installation"
)

HELP_LIST=(
    "PATH_LIST|Fine tuning of the installation directories|--",
    "PROGNAME_LIST|Program names|--",
    "SYSTYPES_LIST|System types|--",
    "EXTRA_LIST|Extralist|--",
    "ENABLED_LIST|Optional list of enabled fautures|--disable-",
    "DISABLED_LIST|Optional list of disabled fautures|--enable-",
    "ENVIRONMENT_LIST|Environment variables|  "
)

DEFAULT_LIST=(
    "PATH_LIST|Fine tuning of the installation directories|--",
    "SYSTYPES_LIST|System types|--",
    "PROGNAME_LIST|Program names|--",
    "EXTRA_LIST|Extralist|--"
)

enable_list "ENABLED_LIST"
disable_list "DISABLED_LIST"
make_environment "ENVIRONMENT_LIST"

for ac_option do
  optval="${ac_option#*=}"
  case "$ac_option" in
  --help)
    print_help "HELP_LIST"
    exit 0
    ;;
  --enable-*=*|--disable-*=*)
    eval $(echo "${ac_option%%=*}" | sed 's/--/action=/;s/-/ thing=/')
    in_list "AUTOCONF_LIST" ${thing} || bad_options="$ac_option $bad_options"
    if test "$action" = "disable"; then
      test "${optval}" = "no" && action=enable
    else
      test "${optval}" = "no" && action=disable
    fi
    echo "$action ${thing}"
    $action ${thing}
    ;;

    --enable-?*|--disable-?*)
    eval $(echo "$ac_option" | sed 's/--/action=/;s/-/ thing=/;s/-/_/g')
    in_list "AUTOCONF_LIST" ${thing} || bad_options="$ac_option $bad_options"
    $action ${thing}
    ;;
    *)
    optname="${ac_option%%=*}"
    optname="${optname#--}"
    optname=${optname//-/_}
    if in_list "SYSCONF_LIST" $optname ; then
        eval $optname=$optval
    elif in_list "ADD_LIST" $optname ; then
	action="add_$optname"
	$action ${optval}
    else
        bad_options="$ac_option $bad_options"
    fi
    ;;
  esac
done
make_defaults "DEFAULT_LIST"
gas=`$cc -print-prog-name=as`
test -n $gas && as=$gas

mktmps
guess_target mp_config.mak mp_config.h

# config files

# FIXME: A lot of stuff is installed under /usr/local
# NK: But we should never use this stuff implicitly since we call compiler
# from /usr we should be sure that there no effects from other compilers
# (libraries) which might be installed into /usr/local.  Let users use this
# stuff explicitly as command line argument.  In other words: It would be
# resonable have or only /usr/include or only /usr/local/include.
enabled static && add_ldflags "-static"

if freebsd ; then
  add_ldflags "-L/usr/local/lib"
  add_cflags  "-I/usr/local/include"
fi
if cygwin ; then
  add_ldflags "-L/usr/bin"
fi

disable gcc44_workaround
# Checking CC version...
# gcc-3.0 merges optimizations coming from egcs, pgcc, agcc, ...
  echocheck "$cc version"
  # also check for name (the version checking is only for _gcc_ up for now)
  # FIXME implement this in ver. check.
  cc_name=`$cc -v 2>&1 | tail -n 1 | cut -d ' ' -f 1`
  cc_version=`$cc -dumpversion`
  cc_v=$cc_version
  case $cc_version in
    4.[4-9]|4.[4-9].[0-9])
      enable gcc44_workaround
      ;;
    3.[3-9]|3.[2-9].[3-9]|4.[0-3]|4.[0-3].[0-9])
      ;;
    *)
      die "*** Bad gcc-$cc_version: Please upgrade C compiler at least to gcc-3.2.3+! ***"
      ;;
  esac
  echores "$cc_version"
# now that we know what compiler should be used for compilation, try to find
# out which assembler is used by the $cc compiler
if cygwin ; then
prefix="."
fi

echocheck "Program name"
prog_alias=$program_transform_name
prog_alias="$program_prefix$prog_alias$program_suffix"
echores "$prog_alias"

# Atmos: moved this here, to be correct, if --prefix is specified
if cygwin ; then
# Keep everything in .exe folder
test -z "$datadir" && datadir="."
test -z "$confdir" && confdir="."
test -z "$libdir" && libdir="."
fi

srcdir=`pwd`
#checking for pkg-config
test $($pkg_config --version 2>/dev/null) || die "no pkg-config found"

#############################################################################
test -n "$profile"	&& disable fastcall
print_config __USE mp_config.h mp_config.mak fastcall

test_optimizations mp_config.mak mp_config.h

# Checking for GOMP
enabled gomp && check_ldflags -fopenmp || disable gomp
enabled gomp && require2 gomp omp.h omp_get_thread_num -lgomp || disable gomp
enabled gomp && check_cflags -fopenmp || disable gomp
print_config HAVE_ mp_config.h mp_config.mak gomp
#enabled gomp && check_cflags -ftree-parallelize-loops=4
#####################################################
add_cflags "-Werror-implicit-function-declaration"
check_cflags "-Wextra"

echocheck CFLAGS
echores   $CFLAGS
echocheck ASFLAGS
echores   $ASFLAGS
echocheck LDFLAGS
echores   $LDFLAGS
echocheck LIBS
echores   $LIBS
echocheck extralibs
echores   $extralibs

######################
# MAIN TESTS GO HERE #
######################
add_cflags "-I$srcdir"


disable ffmpeg
# Checking for FFMPEG
test -f "../ffmpeg/libavcodec/avcodec.h" && enable ffmpeg
disabled ffmpeg && die "**FATAL**: local copy of libavcodec doesn't exist! Please use latest svn to checkout external repository in mplayerxp source tree."
add_cflags "-I$srcdir/../ffmpeg"
print_config HAVE_ mp_config.h mp_config.mak ffmpeg
# Configuring external ffmpeg stuff
ffmpeg_args="--enable-static --disable-shared --disable-doc --disable-ffmpeg --disable-ffplay --disable-ffserver --enable-postproc --enable-gpl --enable-pthreads"
if test -n $host ; then
_arch=$host_arch
x86_32 && _arch="i686"
x86_64 && _arch="x86_64"
ffmpeg_args="--arch=$_arch $ffmpeg_args"
fi
test "$debug" != "0" && ffmpeg_args="$ffmpeg_args --enable-debug=$debug"
enabled $profile  && ffmpeg_args="$ffmpeg_args --enable-profile"
echocheck "configuring ffmpeg stuff: --cc=\"$cc\" $ffmpeg_args"
cd ../ffmpeg
$(LC_ALL=C ./configure --cc="$cc" $ffmpeg_args)
cd $srcdir
echores "done"
###################################

check_header inttypes.h	|| die "cannot find header inttypes.h (see in DOC/faq.html)"

require2 libdl dlfcn.h dlsym -ldl ||  die "dynamic loader was not found"
print_config HAVE_ mp_config.h mp_config.mak libdl

require2 libkstat kstat.h kstat_open -lkstat
print_config HAVE_ mp_config.h mp_config.mak libkstat

require2 posix4 time.h nanosleep -lposix4
print_config HAVE_ mp_config.h mp_config.mak posix4

check_func2 time.h nanosleep
print_config HAVE_ mp_config.h mp_config.mak nanosleep

disable inet_pton
if enabled streaming ; then
disable socklib
for ld_i in "" "-lsocket -lbind" "-lsocket -ldnet" "-lsocket -lnsl" "-lnsl" "-lsocket" ; do
disabled socklib	&& require3 socklib "netdb.h sys/socket.h" SOCK_STREAM gethostbyname $ld_i
enabled socklib	&& break
done
check_func2 "sys/types.h sys/socket.h arpa/inet.h" inet_pton
disabled inet_pton	&& require2 inet_pton "sys/types.h sys/socket.h arpa/inet.h" inet_pton -lresolv
# well, try alternative
if disabled inet_pton ; then
require2 aton "sys/types.h sys/socket.h arpa/inet.h" inet_aton
print_config USE_ mp_config.h mp_config.mak aton
fi
print_config HAVE_ mp_config.h mp_config.mak socklib

if enabled winsock2 && ! cygwin ; then
require2 winsock2 winsock2.h gethostbyname -lws2_32
print_config HAVE_ mp_config.h mp_config.mak winsock2
fi
fi #enabled streaming

disabled inet_pton	&& disable streaming
print_config HAVE_ mp_config.h mp_config.mak streaming

disabled streaming	&& disable af_inet6

if enabled af_inet6 ; then
enabled winsock2	&& require3 af_inet6 ws2tcpip.h AF_INET6 socket
disabled winsock2	&& require3 af_inet6 "sys/socket.h netinet/in.h" AF_INET6 socket
print_config HAVE_ mp_config.h mp_config.mak af_inet6
fi

check_func2 malloc.h malloc
freebsd		&& disable malloc
print_config HAVE_ mp_config.h mp_config.mak malloc
if enabled malloc; then
check_func2 malloc.h memalign
print_config HAVE_ mp_config.h mp_config.mak memalign
fi
check_func2 alloca.h alloca
print_config HAVE_ mp_config.h mp_config.mak alloca

# find if .align arg is power-of-two or not
echocheck ".align is power-of-two"
cat > $TMPC << EOF
asm (".align 3");
EOF
asmalign_pot="no"
cc_check && asmalign_pot="yes"
echores $asmalign_pot
if test "$asmalign_pot" = "yes" ; then
  def_asmalign='#define ASMALIGN(ZEROBITS) ".align " #ZEROBITS "\n\t"'
else
  def_asmalign='#define ASMALIGN(ZEROBITS) ".align 1<<" #ZEROBITS "\n\t"'
fi

check_func3 _ISOC9X_SOURCE math.h lrint -lm
print_config HAVE_ mp_config.h mp_config.mak lrint

check_func3 _ISOC9X_SOURCE math.h llrint -lm
print_config HAVE_ mp_config.h mp_config.mak llrint

check_func3 _ISOC9X_SOURCE math.h HUGE -lm
print_config HAVE_ mp_config.h mp_config.mak HUGE

check_func2 "sys/types.h sys/mman.h" mmap
sys_mman_h=$mmap
print_config HAVE_ mp_config.h mp_config.mak sys_mman_h
enabled mmap	&& check_func2 "sys/mman.h" mlock
print_config HAVE_ mp_config.h mp_config.mak mlock

check_func2 "stdio.h stdarg.h" vsscanf
print_config HAVE_ mp_config.h mp_config.mak vsscanf

if enabled termcap; then
disable termcap
for ld_i in "-ltermcap" "-lncurses" "-ltinfo" ; do
disabled termcap	&& require2 termcap stdio.h tgetent $ld_i
enabled termcap	&& break
done
print_config HAVE_ mp_config.h mp_config.mak termcap
fi

if enabled termios; then
check_header sys/termios.h
print_config HAVE_ mp_config.h mp_config.mak sys_termios_h
disabled sys_termios_h	&& check_header termios.h 
disabled sys_termios_h	&& print_config HAVE_ mp_config.h mp_config.mak termios_h
fi

enabled shm	&& require2 shm "sys/types.h sys/shm.h" shmget
print_config HAVE_ mp_config.h mp_config.mak shm

require2 zlib zlib.h inflate -lz
print_config HAVE_ mp_config.h mp_config.mak zlib

if linux; then
enabled rtc	&& require2 rtc "sys/ioctl.h linux/rtc.h" RTC_IRQP_READ
print_config HAVE_ mp_config.h mp_config.mak rtc
fi

if enabled iconv; then
require2 giconv giconv.h iconv_open -lgiconv
print_config HAVE_ mp_config.h mp_config.mak giconv
disable iconv
for ld_i in "" -liconv ; do
disabled iconv	&& require2 iconv iconv.h iconv_open $ld_i
enabled iconv	&& break
done
print_config HAVE_ mp_config.h mp_config.mak iconv
fi

enabled lirc	&& require2 lirc lirc/lirc_client.h lirc_init -llirc_client
print_config HAVE_ mp_config.h mp_config.mak lirc

enabled lircc	&& require2 lircc lirc/lircc.h lircc_init -llircc
print_config HAVE_ mp_config.h mp_config.mak lircc

disable pthread
for ld_i in "-lpthreadGC2" "-lpthread" "-pthread" "" ; do
disabled pthread	&& require3 pthread "signal.h pthread.h" PTHREAD_COND_INITIALIZER pthread_kill $ld_i
enabled pthread	&& break
done
disabled pthread	&& die "Lib pthread not found. (needed by xp mode)"
print_config HAVE_ mp_config.h mp_config.mak pthread

require2 sys_soundcard_h sys/soundcard.h SNDCARD_SB
print_config HAVE_ mp_config.h mp_config.mak sys_soundcard_h
require2 soundcard_h soundcard.h SNDCARD_SB
print_config HAVE_ mp_config.h mp_config.mak soundcard_h

# XXX: FIXME, add runtime checking
echocheck "linux devfs"
echores "$linux_devfs"

# Checking for localization ...
echocheck "language"
linguas=$language
test -z $linguas && linguas=`echo $LANG | sed 's/^\([^_]*\).*$/\1/'`
if test -f "nls/help_mp-$linguas.h" ; then
  echores "$linguas"
else
  echores "$linguas not found, using en"
  linguas="en"
fi
mp_help="nls/help_mp-$linguas.h"
test -f nls/help_mp-$linguas.h || die "nls/help_mp-$linguas.h not found"
echo "#define I18N_LANGUAGE \"$linguas\"" >>mp_config.h

enable win32loader
if win32 || ! x86_32 ; then
disable win32loader
fi
win32 && add_ldflags -lkernel32
print_config HAVE_ mp_config.h mp_config.mak win32loader

echo -n "win32 dll's ... "
if test -z "$win32libdir" ; then
  for I in /usr/local/lib/win32 /usr/lib/win32 ; do
    if test -d "$I" ; then
      win32libdir="$I"
      break;
    fi;
  done
fi
echo "$win32libdir"
echo "#define WIN32_PATH \"$win32libdir\"" >>mp_config.h

#########
# VIDEO #
#########
check_pkg x11 x11
enabled x11 && require2 x11 "X11/Xlib.h X11/Xutil.h" XCreateWindow -lXext
print_config HAVE_ mp_config.h mp_config.mak x11
enabled x11 && vomodules="x11 $vomodules" || novomodules="x11 $novomodules"

disabled x11	&& disable xdpms
enabled xdpms	&& require2 xdpms "X11/Xlib.h X11/extensions/dpms.h" DPMSQueryExtension
disabled xdpms	&& require2 xdpms "X11/Xlib.h X11/extensions/dpms.h" DPMSQueryExtension -lXdpms
print_config HAVE_ mp_config.h mp_config.mak xdpms

disabled x11	&& disable xv
enabled xv	&& require2 xv "X11/Xlib.h X11/extensions/Xvlib.h" XvGetPortAttribute -lXv
print_config HAVE_ mp_config.h mp_config.mak xv
enabled xv	&& vomodules="xv $vomodules" || novomodules="xv $novomodules"

disabled x11	&& disable xinerama
enabled xinerama	&& require2 xinerama "X11/Xlib.h X11/extensions/Xinerama.h" XineramaIsActive -lXinerama
print_config HAVE_ mp_config.h mp_config.mak xinerama

if win32 ; then
enabled opengl	&& require2 opengl "windows.h GL/gl.h" wglCreateContext -lopengl32 -lgdi32
else
disabled x11	&& disable opengl
enabled opengl  && require2 opengl "GL/gl.h GL/glx.h GL/glut.h" glutInitWindowSize -lglut -lGL 
fi
print_config HAVE_ mp_config.h mp_config.mak opengl
enabled opengl	&& vomodules="opengl $vomodules" || novomodules="opengl $novomodules"

# Note: the -lXxf86vm library is the VideoMode extension and though it's not
# needed for DGA, AFAIK every distribution packages together with DGA stuffs
# named 'X extensions' or something similar.
# This check may be useful for future mplayerxp versions (to change resolution)
# If you run into problems, remove '-lXxf86vm'.
disabled x11	&& disable xf86vm
enabled xf86vm	&& require2 xf86vm "X11/Xlib.h X11/extensions/xf86vmode.h" XF86VidModeQueryExtension -lXxf86vm
print_config HAVE_ mp_config.h mp_config.mak xf86vm

disabled x11	&& disable dga
if enabled dga ; then
require2 dga2 "X11/Xlib.h X11/extensions/xf86dga.h" XDGASetViewport -lXxf86dga
print_config HAVE_ mp_config.h mp_config.mak dga2
enabled dga2	&& enable dga
disabled dga2	&& require2 dga "X11/Xlib.h X11/extensions/xf86dga.h" XF86DGASetViewPort -lXxf86dga
print_config HAVE_ mp_config.h mp_config.mak dga
enabled dga	&& vomodules="dga $vomodules" || novomodules="dga $novomodules"
fi

enabled fbdev	&& require2 fbdev "sys/ioctl.h linux/fb.h" ioctl
print_config HAVE_ mp_config.h mp_config.mak fbdev
enabled fbdev	&& vomodules="fbdev $vomodules" || novomodules="fbdev $novomodules"
if test "$fbdev_nocopy" = yes ; then
    def_fbdev_nocopy='#define USE_CONVERT2FB 1'
fi

if enabled png; then
require2 png png.h PNG_LIBPNG_VER_STRING -lpng
print_config HAVE_ mp_config.h mp_config.mak png
disabled png	&& require2 libpng_png libpng/png.h PNG_LIBPNG_VER_STRING -lpng -lm
print_config HAVE_ mp_config.h mp_config.mak libpng_png
enabled libpng_png	&& enable png
fi
enabled png	&& vomodules="png $vomodules" || novomodules="png $novomodules"

enabled jpg	&& require2 jpeg "stdio.h stdlib.h setjmp.h string.h jpeglib.h" jpeg_write_scanlines -ljpeg
print_config HAVE_ mp_config.h mp_config.mak jpeg
enabled jpeg	&& vomodules="jpeg $vomodules" || novomodules="jpeg $novomodules"

x86_32 || disable vesa
_vesa=$vesa
enabled vesa	&& require3 vesa "asm/vm86.h string.h" VIF_MASK memset
if disabled vesa ; then
vesa=$_vesa
enabled vesa	&& require3 vesa "asm/vm86.h string.h" X86_EFLAGS_VIF memset
fi
print_config HAVE_ mp_config.h mp_config.mak vesa
enabled vesa	&& vomodules="vesa $vomodules" || novomodules="vesa $novomodules"

#################
# VIDEO + AUDIO #
#################

check_pkg sdl sdl
enabled sdl && require2 sdl SDL/SDL.h SDL_CreateYUVOverlay
print_config HAVE_ mp_config.h mp_config.mak sdl
if enabled sdl; then
enabled sdl_image	&& require2 sdl_image SDL/SDL_image.h IMG_Load_RW -lSDL_image
print_config HAVE_ mp_config.h mp_config.mak sdl_image
fi
enabled sdl	&& aomodules="sdl $aomodules" || noaomodules="sdl $noaomodules"
enabled sdl	&& vomodules="sdl $vomodules" || novomodules="sdl $novomodules"
enabled sdl_image && vomodules="sdl_image $vomodules" || novomodules="sdl_image $novomodules"

enabled libcdio	&& require2 libcdio "cdio/cdio.h" cdio_read_mode2_sectors -lcdio
print_config HAVE_ mp_config.h mp_config.mak libcdio

enabled libcdio && require2 libcdio_cdda "cdio/cdda.h" cdio_cddap_read -lcdio_cdda
print_config HAVE_ mp_config.h mp_config.mak libcdio_cdda
enabled libcdio_cdda	&& inputmodules="cdda $inputmodules" || noinputmodules="cdda $noinputmodules"

#########
# AUDIO #
#########

enabled ossaudio	&& require2 ossaudio sys/soundcard.h SNDCTL_DSP_SETFRAGMENT
oss_audio=$ossaudio
print_config USE_ mp_config.h mp_config.mak oss_audio
enabled ossaudio	&& aomodules="oss $aomodules" || noaomodules="oss $noaomodules"
if test "$linux_devfs" = yes; then
    def_ossaudio_devdsp='#define PATH_DEV_DSP "/dev/sound/dsp"'
    def_ossaudio_devmixer='#define PATH_DEV_MIXER "/dev/sound/mixer"'
else
    def_ossaudio_devdsp='#define PATH_DEV_DSP "/dev/dsp"'
    def_ossaudio_devmixer='#define PATH_DEV_MIXER "/dev/mixer"'
fi

enabled alsa && require2 alsa alsa/asoundlib.h SND_LIB_MAJOR -lasound
print_config HAVE_ mp_config.h mp_config.mak alsa
enabled alsa	&& aomodules="alsa $aomodules" || noaomodules="alsa $noaomodules"

# It seems that aRts doesn't support pkg-config
enabled arts && check_cflags $(artsc-config --cflags) && add_cflags $(artsc-config --cflags) || disable arts
enabled arts && check_ldflags $(artsc-config --libs) && add_extralibs $(artsc-config --libs) || disable arts
enabled arts && require2 arts artsc.h arts_write -lartsc
print_config HAVE_ mp_config.h mp_config.mak arts
enabled arts	&& aomodules="arts $aomodules" || noaomodules="arts $noaomodules"

check_pkg esd esound
enabled esd && require2 esd esd.h esd_open_sound
print_config HAVE_ mp_config.h mp_config.mak esd
enabled esd	&& aomodules="esd $aomodules" || noaomodules="esd $noaomodules"

enabled openal && require2 openal AL/al.h alSourceQueueBuffers -lopenal
print_config HAVE_ mp_config.h mp_config.mak openal
enabled openal && aomodules="openal $aomodules" || noaomodules="openal $noaomodules"

enabled nas && require2 nas audio/audiolib.h AuOpenServer -laudio
print_config HAVE_ mp_config.h mp_config.mak nas
enabled nas && aomodules="nas $aomodules" || noaomodules="nas $noaomodules"

check_pkg jack jack
enabled jack && require2 jack jack/jack.h jack_client_open
print_config HAVE_ mp_config.h mp_config.mak jack
enabled jack && aomodules="jack $aomodules" || noaomodules="jack $noaomodules"

enabled libcss	&& require2 libcss css.h CSSisEncrypted -lcss
print_config HAVE_ mp_config.h mp_config.mak libcss
enabled libcss	&& inputmodules="libcss $inputmodules" || noinputmodules="libcss $noinputmodules"

enabled libdvdread	&& require2 libdvdread "stdint.h dvdread/dvd_reader.h dvdread/ifo_types.h dvdread/ifo_read.h dvdread/nav_read.h" DVDOpenFile -ldvdread
dvdread=$libdvdread
print_config USE_ mp_config.h mp_config.mak dvdread
enabled libdvdread	&& inputmodules="libdvdread $inputmodules" || noinputmodules="libdvdread $noinputmodules"

enabled libdvdnav	&& require2 libdvdnav dvdnav/dvdnav.h dvdnav_set_PGC_positioning_flag -ldvdnav
dvdnav=$libdvdnav
print_config USE_ mp_config.h mp_config.mak dvdnav
enabled libdvdnav	&& inputmodules="libdvdnav $inputmodules" || noinputmodules="libdvdnav $noinputmodules"

enabled libvcd && require2 libvcd libvcd/info.h vcdinfo_open -lvcdinfo
print_config USE_ mp_config.h mp_config.mak libvcd
enabled libvcd	&& inputmodules="libvcd $inputmodules" || noinputmodules="libvcd $noinputmodules"

enabled libdv && check_pkg libdv libdv
enabled libdv && require2 libdv "libdv/dv.h" dv_encoder_new -ldv
print_config HAVE_ mp_config.h mp_config.mak libdv
enabled libdv	&& inputmodules="libdv $inputmodules" || noinputmodules="libdv $noinputmodules"

enabled fastmemcpy	&& x86	|| disable fastmemcpy
print_config USE_ mp_config.h mp_config.mak fastmemcpy

enabled tv && print_config USE_ mp_config.h mp_config.mak tv
enabled tv	&& inputmodules="tv $inputmodules" || noinputmodules="tv $noinputmodules"

enabled tv_v4l && require2 tv_v4l "stdlib.h linux/videodev.h" video_devdata
print_config HAVE_ mp_config.h mp_config.mak tv_v4l
enabled tv_v4l	&& vomodules="tv-v4l $vomodules" || novomodules="tv-v4l $novomodules"

print_config HAVE_ mp_config.h mp_config.mak audio_select

enabled libvorbis && check_pkg libvorbis vorbis
print_config HAVE_ mp_config.h mp_config.mak libvorbis
enabled libvorbis && inputmodules="libvorbis $inputmodules" || noinputmodules="libvorbis $noinputmodules"

enabled libtheora && check_pkg libtheora theora
print_config HAVE_ mp_config.h mp_config.mak libtheora
enabled libtheora && inputmodules="libtheora $inputmodules" || noinputmodules="libtheora $noinputmodules"

enabled libbz2 && require2 libbz2 bzlib.h BZ2_bzlibVersion -lbz2 || disable libbz2
print_config HAVE_ mp_config.h mp_config.mak libbz2

CFLAGS="$CFLAGS -W -Wall"
# Thread support
if linux ; then
  CFLAGS="$CFLAGS -D_REENTRANT"
elif bsd ; then
  # FIXME bsd needs this so maybe other OS'es
  CFLAGS="$CFLAGS -D_THREAD_SAFE"
fi

# 64 bit file offsets?
enabled largefiles	&& CFLAGS="$CFLAGS -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D__USE_FILE_OFFSET64 -D__USE_LARGEFILE -D_LARGEFILE64_SOURCE"

# Dynamic linking flags 
# (FIXME: 'echocheck "dynamic linking"' above and modify here accordingly)
bsd && add_ldflags "-rdynamic"

test "$debug" != "0" && def_debug='#define MP_DEBUG 1' || def_debug='#undef MP_DEBUG'

# Checking for VIDIX
enabled vidix	&& require2 vidix vidix/vidixlib.h vdlAllocFourccS -lvidix
print_config CONFIG_ mp_config.h mp_config.mak vidix
enabled x11	&& enabled vidix	&& vomodules="vidix $vomodules" || novomodules="vidix $novomodules"


enabled joystick	&& test linux	|| disable joystick
print_config HAVE_ mp_config.h mp_config.mak joystick


#############################################################################
echo "Creating mp_config.mak"
cat >> mp_config.mak << EOF
# -------- Generated by configure -----------

LANG = C
prefix = $prefix
BINDIR = $bindir
DATADIR = $datadir
CONFDIR = $confdir
LIBDIR = $libdir
DESTDIR = $DESTDIR
PROGNAME = $prog_alias
AR = ar
CC = $cc
LDCONFIG=$ldconfig
INSTALL=$install
# OPTFLAGS = -O3 $profile $debug $gcov $march $mcpu -pipe -fomit-frame-pointer -ffast-math
OPTFLAGS = $CFLAGS
DEBUG = -DDEBUG

# --- HAZARDOUS STUFF

EOF
echo "EXTRALIBS=$extralibs" >> mp_config.mak
echo "LDFLAGS=$LDFLAGS" >> mp_config.mak

#############################################################################
echo "Creating mp_config.h"
cat >> mp_config.h << EOF
#ifndef MPXP_CONFIG_H
#define MPXP_CONFIG_H 1
/* -------- This file has been automatically generated by configure ---------
   Note: Any changes in it will be lost when you run configure again. */

#define USR_PREFIX "$prefix"

/* define this to use simple idct with patched libavcodec */
#define SIMPLE_IDCT 1

#define USE_OSD 1
#define USE_SUB 1

/* Toggles debugging informations */
$def_debug

/* Common data directory (for fonts, etc) */
#define PROGNAME "$prog_alias"
#define BINDIR "$bindir"
#define DATADIR "$datadir"
#define CONFDIR "$confdir"
#define LIBDIR "$libdir"

/* Define this to enable avg. byte/sec-based AVI sync method by default:
   (use -bps or -nobps commandline option for run-time method selection)
   -bps gives better sync for vbr mp3 audio, it is now default */
#define AVI_SYNC_BPS 1

/* Undefine this if you do not want to select mono audio (left or right)
   with a stereo MPEG layer 2/3 audio stream. The command-line option
   -stereo has three possible values (0 for stereo, 1 for left-only, 2 for
   right-only), with 0 being the default.
   */
#define USE_FAKE_MONO 1

/* define this to use iconv(3) function to codepage conversions */
#if defined(HAVE_GICONV) || defined(HAVE_ICONV)
#define USE_ICONV 1
#endif

/* set up max. outburst. use 65536 for ALSA 0.5, for others 16384 is enough */
#define MAX_OUTBURST 65536

/* set up audio OUTBURST. Do not change this! */
#define OUTBURST 512

/* memalign is mapped to malloc if unsupported */
#ifndef HAVE_MEMALIGN
# define memalign(a,b) malloc(b)
#endif

/* ASMALIGN */
$def_asmalign

/* Define this if your system has the llrint in "math.h" header file */
#ifndef HAVE_LLRINT
#define HAVE_LLRINT 1
static inline long long int llrint(double x)
{
    return (int)(x + (((int)x-x) < 0 ? -0.5 : 0.5));
}
#endif

/* Define this if your system has the lrint in "math.h" header file */
#ifndef HAVE_LRINT
#define HAVE_LRINT 1
static inline long int lrint(double x)
{
    return (int)(x + (((int)x-x) < 0 ? -0.5 : 0.5));
}
#endif

/* Define this if your system has the HUGE in "math.h" header file */
#ifndef HAVE_HUGE
#define HUGE 3.40282347e+38F
#endif

#define PREFIX "$prefix"

/* Audio output drivers */
$def_ossaudio_devdsp
$def_ossaudio_devmixer

#ifdef sun
#define	DEFAULT_CDROM_DEVICE	"/vol/dev/aliases/cdrom0"
#define DEFAULT_DVD_DEVICE	DEFAULT_CDROM_DEVICE
#else
#define DEFAULT_CDROM_DEVICE    "/dev/cdrom"
#define DEFAULT_DVD_DEVICE	"/dev/dvd"
#endif

/*----------------------------------------------------------------------------
**
** NOTE: Instead of modifying these definitions here, use the
**       --enable/--disable options of the ./configure script!
**       See ./configure --help for details.
**
*---------------------------------------------------------------------------*/

/* libvo options */
$def_fbdev_nocopy

/* Defined to some form of __attribute__ ((...)) if the compiler supports
   a different, more efficient calling convention.  */
#if defined ( __USE_FASTCALL ) && defined ( ARCH_X86 )
/*# define internal_function __attribute__ ((regparm (3), stdcall))*/
# define __FASTCALL__ __attribute__ ((regparm (3)))
#else
# define __FASTCALL__
#endif

#ifndef attribute_used
#if defined(__GNUC__) && (__GNUC__ > 3 || __GNUC__ == 3 && __GNUC_MINOR__ > 0)
#    define attribute_used __attribute__((used))
#else
#    define attribute_used
#endif
#endif

#ifndef attribute_unused
#if defined(__GNUC__) && (__GNUC__ > 3 || __GNUC__ == 3 && __GNUC_MINOR__ > 0)
#    define attribute_unused __attribute__((unused))
#else
#    define attribute_unused
#endif
#endif

/* Removes warning about unused arguments */
# define UNUSED(x) ((void)(x))

#endif /* MPXP_CONFIG_H */
EOF

#############################################################################

echo "Creating help_mp.h"
cat > help_mp.h << EOF
#include "$mp_help"
#include "nls/help_mp-en.h"
EOF

#############################################################################

#FIXME: add something like "Optimizing for: i686 mmx mmx2 sse"
cat << EOF | tee -a $TMPLOG

Config files successfully generated by ./configure !

  Install prefix: $prefix
  Data directory: $datadir
  Config direct.: $confdir

  Enabled optional drivers:
    Input: $inputmodules
    Codecs: $codecmodules
    Audio output: $aomodules
    Video output: $vomodules
  Disabled optional drivers:
EOF
show_homepage "Input:" "noinputmodules" "AUTOCONF_LIST"
show_homepage "Codecs:" "nocodecmodules" "AUTOCONF_LIST"
show_homepage "Audio output:" "noaomodules" "AUTOCONF_LIST"
show_homepage "Video output:" "novomodules" "AUTOCONF_LIST"
cat << EOF | tee -a $TMPLOG
'make' will now compile MPlayerXP and 'make install' will install it.
Note: On non-Linux systems you might need to use 'gmake' instead of 'make'.
EOF

if disabled gomp ; then
cat << EOF | tee -a $TMPLOG
  *** WARNING***: You may improve performance of MPlayerXP by using gcc-4.3+
  with built-in Gnu OpenMP support!!!
EOF
fi

if test -n "$bad_options" ; then
cat << EOF | tee -a $TMPLOG
  WARNING! Ignored/unrecognized options:
  $bad_options

EOF
fi

cat << EOF
Check $TMPLOG if you wonder why an autodetection failed (check whether the
development headers/packages are installed).

EOF

if disabled vidix; then
cat <<EOF
You've disabled VIDIX. Although it provides maximal speedup of playback.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Please visit http://vidix.sf.net to obtain the most recent copy of VIDIX.
EOF
fi

if enabled gcc44_workaround ; then
warning "*** gcc-4.4.x sometime generates AVX opcodes for -mavx key ignoring -fno-tree-vectorize option.
That breaks current logic of mplayerxp configuring.
It is stronly recommended to use this version of gcc for home purposes only!
Please don't use this compiler to produce redistributable executables of mplayerxp!!! ***"
fi

# Last move:
rmtmps

