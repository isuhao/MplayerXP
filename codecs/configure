#!/bin/sh
# The simplest configure for codecs

. ../functions

print_config(){
    pfx=$1
    header=$2
    makefile=$3
    shift 3
    for cfg; do
        ucname="`toupper $cfg`"
        if enabled $cfg; then
            echo "#define ${pfx}${ucname} 1" >> $header
            echo "#define ENABLE_${ucname} 1" >> $header
            echo "${pfx}${ucname}=yes" >> $makefile
        else
            echo "#define ENABLE_${ucname} 0" >> $header
        fi
    done
}

check_deps(){
    for cfg; do
        enabled ${cfg}_checking && die "Circular dependency for $cfg."
        disabled ${cfg}_checking && continue
        enable ${cfg}_checking

        eval dep_all="\$${cfg}_deps"
        eval dep_any="\$${cfg}_deps_any"

        pushvar cfg dep_all dep_any
        check_deps $dep_all $dep_any
        popvar cfg dep_all dep_any

        enabled_all $dep_all || disable $cfg
        enabled_any $dep_any || disable $cfg

        if enabled $cfg; then
            eval dep_extralibs="\$${cfg}_extralibs"
            test -n "$dep_extralibs" && add_extralibs $dep_extralibs
        fi

        disable ${cfg}_checking
    done
}

check_type(){
    log check_type "$@"
    headers=$1
    type=$2
    shift 2
    disable $type
    incs=""
    for hdr in $headers; do
        incs="$incs
#include <$hdr>"
    done
    check_cc "$@" <<EOF && enable $type
$incs
$type v;
EOF
}

for parm in "$@" ; do
  if test "$parm" = "--help" || test "$parm" = "-help" || test "$parm" = "-h" ; then
    cat << EOF

Usage: $0 [OPTIONS]...

Configuration:
  -h, --help               display this help and exit

Installation directories:
  --prefix=DIR           use this prefix for installing mplayer [/usr/local]

Fine tuning of the installation directories:
  --datadir=DIR          use this prefix for installing machine independent
                         data files (fonts, skins) [PREFIX/share/mplayer]
  --confdir=DIR          use this prefix for installing configuration files
                         [same as datadir]
  --libdir=DIR           use this prefix to specify library location
                         [PREFIX/lib]
  --codecdir=DIR         use this prefix for installing shared libraries
                         [LIBDIR/mplayerxp]

System types:
  --build=BUILD          configure for building on BUILD [guessed]
  --host=HOST            cross-compile to build program to run on HOST [BUILD]

Program names:
  --program-suffix=SUFX  append SUFX to installed program names

Use these options if autodetection fails:
  --with-extraincdir=DIR   extra headers (png, dvb, mad, sdl, css, ...) in DIR
  --with-extralibdir=DIR   extra library files (png, SDL, ...) in DIR
  --with-extraldflags=LIST extra LDFLAGS
  --with-mlibdir=DIR       libmlib (MLIB support) in DIR (Solaris only)

Miscellaneous options:
  --cc=COMPILER          use this C compiler to build MPlayer [gcc]
  --as=ASSEMBLER         use this C compiler to build MPlayer [as]

Advanced options:
  --enable-gomp          Enable GNU OpenMP (requires gcc-4.3+) [autodetect]
  --enable-mlib          build with MLIB support (Solaris only) [autodetect]
  --enable-debug[=1-3]   compile debugging information into mplayer [disable]
  --enable-profile       compile profiling information into mplayer [disable]
  --disable-fastcall     disable regparm method on x86 systems [autodetect]

Environment variables:
  MAKE      Make command (example: "make -j")
  AS        Assembler command
  CC        C compiler command (example: "gcc -m64 -mveclibabi=acml")
  CFLAGS    C compiler flags (example:
             "-O3 -msse -msse2 -msse3 -mfpmath=387,sse -mfancy-math-387
              -ffast-math -funroll-all-loops -ftree-loop-optimize
              -ftree-vect-loop-version -ftree-vectorize -fomit-frame-pointer
              -finline-functions-called-once -funit-at-a-time -pipe")
  LDFLAGS   linker flags, e.g. -L<lib dir> if you have libraries in a
            nonstandard directory <lib dir>
  LIBS      specifies additional libs (like: export LIBS=-lacml_mv)
  DESTDIR   specifies base of installation

EOF
    exit 0
  fi
done # for parm in ...


# LGB: temporary files
for I in "$TMPDIR" "$TEMPDIR" "/tmp" ; do
  test "$I" && break
done

mktmps

if test -z "$CC"; then
cc=gcc
else
cc="$CC"
fi
mlib=yes
gomp=yes
prefix="/usr/local"
fastcall=auto
psuffix=
as=auto
for ac_option do
  case "$ac_option" in
  --build=*)
    build=`echo $ac_option | cut -d '=' -f 2`
    ;;
  --host=*)
    host=`echo $ac_option | cut -d '=' -f 2`
    ;;
  --prefix=*)
    prefix=`echo $ac_option | cut -d '=' -f 2`
    ;;
  --datadir=*)
    datadir=`echo $ac_option | cut -d '=' -f 2`
    ;;
  --confdir=*)
    confdir=`echo $ac_option | cut -d '=' -f 2`
    ;;
  --libdir=*)
    libdir=`echo $ac_option | cut -d '=' -f 2`
    ;;
  --codecdir=*)
    codecdir=`echo $ac_option | cut -d '=' -f 2`
    ;;
  --program-suffix=*)
    psuffix=`echo $ac_option | cut -d '=' -f 2`
    ;;
  --with-extraincdir=*)
    inc_extra="$inc_extra -I`echo $ac_option | cut -d '=' -f 2 | sed 's,:, -I,g'`"
    ;;
  --with-extralibdir=*)
    ld_extra="$ld_extra -L`echo $ac_option | cut -d '=' -f 2 | sed 's,:, -L,g'`"
    ;;
  --with-extraldflags=*)
    exld_flags="$exld_flags -L`echo $ac_option | cut -d '=' -f 2 | sed 's,:, -L,g'`"
    ;;
  --with-mlibdir=*)
    mlibdir=`echo $ac_option | cut -d '=' -f 2`
    mlib=yes
    ;;
  --cc=*)
    cc=`echo $ac_option | cut -d '=' -f 2`
    ;;
  --as=*)
    as=`echo $ac_option | cut -d '=' -f 2`
    ;;
  --disable-profile)
    profile=
    ;;
  --enable-profile)
    profile='-p'
    ;;
  --enable-debug)
    debug='-g'
    debug_level=1
    ;;
  --enable-debug=*)
    debug=`echo $_echo_n '-g'$_echo_c; echo $ac_option | cut -d '=' -f 2`
    debug_level=`echo $_echo_n echo $ac_option | cut -d '=' -f 2`
    ;;
  --enable-mlib)	mlib=yes	;;
  --disable-mlib)	mlib=no	;;
  --enable-gomp)	gomp=yes	;;
  --disable-gomp)	gomp=no	;;
  --enable-fastcall)	fastcall=yes	;;
  --disable-fastcall)	fastcall=no	;;
  *)
    ;;
  esac
done

guess_target config.mak config.h

echocheck "Program name"
prog_alias="mplayerxp$psuffix"
echores "$prog_alias"

# Atmos: moved this here, to be correct, if --prefix is specified
if cygwin ; then
test -z "$datadir" && datadir="."
test -z "$confdir" && confdir="."
test -z "$libdir" && libdir="."
test -z "$codecdir" && codecdir="."
else
test -z "$datadir" && datadir="$prefix/share/$prog_alias"
test -z "$confdir" && confdir="$datadir"
test -z "$libdir" && libdir="$prefix/lib"
test -z "$codecdir" && codecdir="$libdir/$prog_alias/codecs"
fi
test -z "$mlibdir" && mlibdir="$MLIBHOME"

if ! test -f ffmpeg/configure ; then
die "*** local copy of ffmpeg was not found ***"
fi
ffmpeg_args="--prefix=$codecdir/ffmpeg --libdir=$codecdir --shlibdir=$codecdir --enable-shared --disable-static --disable-doc --disable-ffmpeg --disable-ffplay --disable-ffserver --enable-pic --enable-postproc --enable-gpl --enable-pthreads"
if test -n $host ; then
_arch=$host_arch
x86_32 && _arch="x86_32"
x86_64 && _arch="x86_64"
ffmpeg_args="--arch=$arch $ffmpeg_args"
fi
test -n $debug_level      && ffmpeg_args="$ffmpeg_args --enable-debug=$debug_level"
echocheck "configuring ffmpeg stuff: --cc=\"$cc\" $ffmpeg_args"
cd ffmpeg
$(LC_ALL=C ./configure --cc="$cc" $ffmpeg_args)
cd ..
echores "done"

subdirs="ffmpeg mp3lib liba52 libdca libmpeg2"


cc_version=`$cc -dumpversion`
if test "$fastcall" = auto ; then
echocheck "__fastcall optimization abilities"
case $cc_version in
    '')
      fastcall=no
      ;;
    # avoid fastcall usage on gcc-2.95.2 and older
    2.95.[3-9]|2.95.[3-9].[0-9]|3.[0-9]|3.[0-9].[0-9]|4.[0-9].[0-9])
      fastcall=yes
      ;;
    *)
      fastcall=no
      ;;
esac
echores "$fastcall"
fi

# now that we know what compiler should be used for compilation, try to find
# out which assembler is used by the $cc compiler
echocheck "as"
if test "$as" = auto ; then
  as=`$cc -print-prog-name=as`
  test -z "$as" && _as=as
fi
echores "$as"

# Checking for CFLAGS
dbg_flags=
if test "$debug" = "-g3"; then
dbg_flags="-finline-limit-5"
fi

test -n "$profile"	&& disable fastcall
print_config __USE config.h config.mak fastcall

test_optimizations config.mak config.h

test -n "$ld_extra"	&& add_extralibs $ld_extra
test -n "$exld_flags"	&& add_ldflags $exld_flags
test -n "$inc_extra"	&& add_cflags $inc_extra

# Checking for GOMP
enabled gomp && check_ldflags -fopenmp || disable gomp
enabled gomp && require2 gomp omp.h omp_get_thread_num -lgomp || disable gomp
enabled gomp && check_cflags -fopenmp || disable gomp
#enabled gomp && check_cflags -ftree-parallelize-loops=4

add_cflags "-Werror-implicit-function-declaration"

check_func2 malloc.h malloc
print_config HAVE_ config.h config.mak malloc

check_func2 malloc.h memalign
print_config HAVE_ config.h config.mak memalign

check_func2 alloca.h alloca
print_config HAVE_ config.h config.mak alloca

enabled mlib	&& require2 mlib mlib.h mlib_VideoColorYUV2ABGR420 -lmlib
print_config	HAVE_ config.h config.mak mlib

disable pthreads
for ld_i in "-lpthreadGC2" "" "-lpthread" "-pthread" ; do
disabled pthreads	&& require3 pthreads pthread.h PTHREAD_COND_INITIALIZER pthread_cond_timedwait $ld_i
enabled pthreads	&& break
done
disabled pthreads	&& die "Lib pthread not found. (needed by xp mode)"
print_config HAVE_ config.h config.mak pthreads

extralibs="$extralibs -lm"

check_func mkstemp
print_config HAVE_ config.h config.mak mkstemp

require2 zlib zlib.h zlibVersion -lz
print_config CONFIG_ config.h config.mak zlib

check_func3 _ISOC9X_SOURCE math.h lrintf
print_config HAVE_ config.h config.mak lrintf

check_func3 _ISOC9X_SOURCE math.h llrintf
print_config HAVE_ config.h config.mak llrintf

check_func3 _ISOC9X_SOURCE math.h lrint
print_config HAVE_ config.h config.mak lrint

check_func3 _ISOC9X_SOURCE math.h llrint
print_config HAVE_ config.h config.mak llrint

check_func3 _ISOC9X_SOURCE math.h round
print_config HAVE_ config.h config.mak round

check_func3 _ISOC9X_SOURCE math.h roundf
print_config HAVE_ config.h config.mak roundf

#test for restrict
_restrict=
for restrict_keyword in restrict __restrict__ __restrict; do
    cat > $TMPC << EOF
void foo(char * $restrict_keyword p);
int main(void) { }
EOF
    cc_check && _restrict=$restrict_keyword && break
done

source_path=`pwd`

buildsuf=
#############################################################################
echo "Creating config.mak"
cat >> config.mak << EOF
# -------- Generated by configure -----------

prefix = $prefix
PROGNAME = $prog_alias
DATADIR = $datadir
CONFDIR = $confdir
LIBDIR = $libdir
CODECDIR = $codecdir
SUBDIRS = $subdirs
DESTDIR = $DESTDIR
OPTFLAGS = $CFLAGS -fPIC
SHCFLAGS = $CFLAGS -fPIC
MLIB_LIB =  $ld_mlib
MLIB_INC = $inc_mlib

BUILD_SHARED=yes
SRC_PATH=$source_path
BUILD_ROOT=$source_path

MAKE=make
CC=$cc
LN_S=ln -s -f
AR=ar
RANLIB=ranlib
STRIP=strip
INSTALLSTRIP=-s
FFSLDFLAGS=
SHFLAGS=-shared
LIBPREF=lib
LIBSUF=.a
BUILDSUF=
SLIBPREF=lib
SLIBNAME=\$(SLIBPREF)\$(NAME)\$(SLIBSUF)
SLIBNAME_WITH_VERSION=\$(SLIBNAME).\$(LIBVERSION)
SLIBNAME_WITH_MAJOR=\$(SLIBNAME).\$(LIBMAJOR)

EOF

#############################################################################
echo "Creating config.h"
cat >> config.h << EOF

/* -------- This file has been automatically generated by configure ---------*/

/* Common data directory (for fonts, etc) */
#define PROGNAME "$prog_alias"
#define DATADIR "$datadir"
#define CONFDIR "$confdir"
#define LIBDIR "$libdir"
#define CODECDIR "$codecdir"

/* libmpeg2 uses a different feature test macro for mediaLib */
#ifdef HAVE_MLIB
#define LIBMPEG2_MLIB 1
#endif

/* memalign is mapped to malloc if unsupported */
$def_memalign
#ifndef HAVE_MEMALIGN
# define memalign(a,b) malloc(b)
#endif

/* Define if your cpu has the MVI intruction set */
$def_mvi

#ifndef HAVE_LLRINT
#define HAVE_LLRINT 1
static inline long long int llrint(double x)
{
    return (int)(x + (((int)x-x) < 0 ? -0.5 : 0.5));
}
#endif

#ifndef INFINITY
#define INFINITY HUGE_VAL
#endif

#ifdef HAVE_PTHREADS
/* BeOS workaround */
#define HAVE_THREADS 1
#define ENABLE_THREADS 1
#else
#define ENABLE_THREADS 0
#endif

$def_fastcall

/* Defined to some form of __attribute__ ((...)) if the compiler supports
   a different, more efficient calling convention.  */
#if defined ( __USE_FASTCALL ) && defined ( ARCH_X86 )
/*# define internal_function __attribute__ ((regparm (3), stdcall))*/
# define __FASTCALL__ __attribute__ ((regparm (3)))
#else
# define __FASTCALL__
#endif

EOF
echo "#define restrict $restrict" >> config.h

echo "EXTRALIBS=$extralibs" >> config.mak
echo "LDFLAGS=$LDFLAGS" >> config.mak

# Last move:
rmtmps
